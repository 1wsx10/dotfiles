#!/bin/bash

set -e

# Colors 
BLD=$(tput bold)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YLW=$(tput setaf 3)
BLUE=$(tput setaf 4)
PURPLE=$(tput setaf 5)
CYAN=$(tput setaf 6)
WHITE=$(tput setaf 7)
CRESET=$(tput sgr0)

myreadlink() {
    if readlink -f . >/dev/null 2>&1; then
        readlink "$@"
    else
        greadlink "$@" # Provided on Homebrew's coreutils
    fi
}

this_dir="$(dirname "$(myreadlink -f "$0")")"
base_dir="$this_dir/.."

# Should define arrays: cfg_ignore cfg_first_child and cfg_dest_dir
if ! [[ -e  $base_dir/SYMLINKSCONF ]]; then
    echo "SYMLINKSCONF file needed. See CONFIG.example for directions and copy it to SYMLINKSCONF."
    exit 1
fi
. "$base_dir/SYMLINKSCONF"

DEBUG=0

echo_usage() {
    echo "usage: $(basename "$0") [-h|--help | --noop|--dry-run]"
    echo
    echo "    Create the symlinks to these dotfiles according to the configuration"
    echo "    (present in '../SYMLINKSCONF')."
    echo "    Note that it never replaces existing files."
}

if [[ $# -ge 1 ]]; then
    if [[ $1 =~ ^-h|--help$ ]]; then
        echo_usage
        exit 0
    elif [[ $1 =~ ^--dry-run|--noop$ ]]; then
        DEBUG=1
    fi
fi

element_in() {
    local i
    for i in "${@:2}"; do
        # No quotes on $1 ==> $1 can be a glob
        if [[ "$1" == $i ]]; then
            return 0
        fi
    done
    return 1
}

# Create a symlink in $1 that points to $2
# Optionally prepend target with $3 if using relative paths
do_symlink() {
    local target="$1"
    local dest="$2"
    local prepend_target="${3:-}"
    if [[ -L $dest ]]; then
        echo "${YLW}Warning${CRESET}: '$dest' is already a link. Skipping." 1>&2
        return 0
    fi
    if [[ -e $dest ]]; then
        echo "${RED}Warning${CRESET}: '$dest' is a file. Skipping." 1>&2
        return 0
    fi
    
	target="$(myreadlink -f "$target")"
    #target="${prepend_target}$cfg_dotfiles_relative_path/$target"

    if [[ $DEBUG == 1 ]]; then
        echo "${GREEN}Info${CRESET}: (dry run) would create '$dest' -> '$target'"
    else
        echo "${GREEN}Info${CRESET}: creating '$dest' -> '$target'"
        ln -s "$target" "$dest"
    fi
}


doit() {
    local i j
    for i in * .[^.]*; do

        if element_in "$i" "${cfg_ignore[@]}"; then
            continue
        fi

        if element_in "$i" "${cfg_first_child[@]}"; then
            for j in "$i"/*; do
                mkdir -p "$cfg_dest_dir/${j#$i}"
                do_symlink "$j" "$cfg_dest_dir/$j" ../
            done
            continue
        fi
        do_symlink "$i" "$cfg_dest_dir/$i"
    done
}



# check for windows
windows() { [[ -n "$WINDIR" ]]; }
win_abs() {
	#replace  /c/asdf/fdsa/Etc/file
	#with     C:/asdf/fdsa/Etc/file
	echo $1 | sed "s/^\/\(.\)\(.*\)$/\u\1:\2/"
}

# Cross-platform symlink function. With one parameter, it will check
# whether the parameter is a symlink. With two parameters, it will create
# a symlink to a file or directory, with syntax: link $linkname $target
ln() {
    if [[ -z "$3" ]]; then
        # Link-checking mode.
        if windows; then
            fsutil reparsepoint query "$3" > /dev/null
        else
            [[ -h "$3" ]]
        fi
    else
        # Link-creation mode.
        if windows; then
            # Windows needs to be told if it's a directory or not. Infer that.
            # Also: note that we convert `/` to `\`. In this case it's necessary.

			if [[ "$2" = /* ]]; then
				#2 is absolute path
				TWO=$(win_abs $2)
			else
				#2 is not absolute
				TWO="$2"
			fi
			if [[ "$3" = /* ]]; then
				#3 is absolute path
				THREE=$(win_abs $3)
			else
				#3 is not absolute
				THREE="$2"
			fi

            if [[ -d "$3" ]]; then
                cmd <<< "mklink /D \"$THREE\" \"${TWO//\//\\}\"" > /dev/null
            else
                cmd <<< "mklink \"$THREE\" \"${TWO//\//\\}\"" > /dev/null
            fi
        else
			$(which ln) "$@"
        fi
    fi
}




( cd "$base_dir" && doit )
